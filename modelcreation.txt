from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D , MaxPooling2D, Flatten ,Dense,Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt

import os
os.environ['KAGGLE_USERNAME']='ashutoshpanda'
os.environ['KAGGLE_KEY']='2ae2bfe272b9ee93fee0ee698c731234'

! kaggle datasets download -d prithwirajmitra/covid-face-mask-detection-dataset

! unzip covid-face-mask-detection-dataset

main_dir= '/content/New Masks Dataset'
train_dir=os.path.join(main_dir,'Train')
test_dir=os.path.join(main_dir,'Test')
val_dir=os.path.join(main_dir,'Validation')

train_mask_dir=os.path.join(train_dir,'Mask')
train_no_mask_dir=os.path.join(train_dir,'Non Mask')

train_mask_names=os.listdir(train_mask_dir)
print(train_mask_names[:10])

train_no_mask_names=os.listdir(train_no_mask_dir)
print(train_no_mask_names[:10])

import matplotlib.image as npimg
nrows=4
ncols=4
plt.figure(figsize=(12,12))

mask_img=[]
for i in train_mask_names[0:8]:
  mask_img.append(os.path.join(train_mask_dir,i))

nomask_img=[]
for i in train_no_mask_names[0:8]:
  nomask_img.append(os.path.join(train_no_mask_dir,i))

print(mask_img)
print(nomask_img)  

merged_list=mask_img+nomask_img
for i in range(0,len(merged_list)):
  data=merged_list[i].split('/',4)[4]
  sp=plt.subplot(nrows,ncols,i+1)
  sp.axis('Off')
  image=npimg.imread(merged_list[i])
  sp.set_title(data,fontsize=12)
  plt.imshow(image,cmap='gray')

plt.show()

train_datagen= ImageDataGenerator(rescale=1./255,
                                  zoom_range=0.2,
                                  rotation_range=40,
                                  horizontal_flip=True
                                  )
test_datagen= ImageDataGenerator(rescale=1./255)
val_datagen= ImageDataGenerator(rescale=1./255)

train_generator= train_datagen.flow_from_directory(train_dir,
                                                   target_size=(150,150),
                                                   batch_size=32,
                                                   class_mode='binary'
                                                   )
test_generator= test_datagen.flow_from_directory(test_dir,
                                                   target_size=(150,150),
                                                   batch_size=32,
                                                   class_mode='binary'
                                                   ) 
val_generator= val_datagen.flow_from_directory(val_dir,
                                                   target_size=(150,150),
                                                   batch_size=32,
                                                   class_mode='binary'
                                                   ) 

model=Sequential()
model.add(Conv2D(32,(3,3),padding='SAME',activation='relu',input_shape=(150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(64,(3,3),padding='SAME',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1,activation='sigmoid'))
model.summary()

model.compile(Adam(lr=0.001),loss='binary_crossentropy',metrics=['accuracy']) 

histroy=model.fit(train_generator,
                  epochs=30,
                  validation_data=val_generator)

histroy.history.keys()

from google.colab import files
from keras.preprocessing import image
upload = files.upload()
for fname in upload.keys():
  img_path='/content/'+fname
  img=image.load_img(img_path,target_size=(150,150))
  images=image.img_to_array(img)
  images=np.expand_dims(images,axis=0)
  prediction=model.predict(images)
  print(fname)

  if prediction == 0:
    print("MASK")
  else:
    print("NO MASK")  

model.save('model.h5')